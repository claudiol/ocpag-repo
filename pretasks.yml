- name: "pretasks | Checking the destination dir [{{ destination }}]"
  ansible.builtin.stat:
    path: "{{ destination }}"
  register: destination_path

- ansible.builtin.fail:
    msg: "pretasks | Path [{{ destination }}] does not exists. Please create the directory."
  when: destination_path.stat.exists == false 

- name: "Checking space in {{ destination }} directory" 
  ansible.builtin.debug:
    msg: "Looks like you have enough space. Available space [{{ disk_usage_s }}GiB]"
  when: 'mount_size_available is defined and disk_usage_s|int > 30'

- name: "pretasks | Checking the pull secret [{{ pull_secret_path}}]"
  ansible.builtin.stat:
    path: "{{ pull_secret_path}}"
  register: result_pull_secret

- ansible.builtin.fail:
    msg: "pretasks | Pull secret [{{ pull_secret_path }}] does not exists. Please enter a valid pull secret file."
  when: result_pull_secret.stat.exists == false
  
- name: "pretasks | Checking ocp_version"
  ansible.builtin.debug:
    msg: "pretasks | Desired OpenShift version: {{ desired_ocp_version }}"
  register: version_check
  when: (desired_ocp_version.split('.') | length) > 2

- debug:
    var: version_check
    
- ansible.builtin.fail: 
    msg: "pretasks | The desired ocp version [{{ desired_ocp_version }}] is not valid. Valid Example: 4.10.1"
  when: 
    - version_check.skip_reason is defined and version_check.skip_reason == "Conditional result was False"

- name: pretasks | OpenShift 4 versions
  ansible.builtin.debug:
    msg: "pretasks | Version {{ desired_ocp_version }} is valid"
  register: v4_result
  when: 'desired_ocp_version|string in v4_versions.stdout'

- name: pretasks | Stable OpenShift 4 versions
  ansible.builtin.debug:
    msg: "pretasks | Version {{ desired_ocp_version }} is valid"
  register: stable_result
  when: 'desired_ocp_version|string in stable_v4_versions.stdout'

- ansible.builtin.fail: 
    msg: "pretasks | The desired ocp version [{{ desired_ocp_version }}] does not exits"
  when: 
    - v4_result.skip_reason is defined and v4_result.skip_reason == "Conditional result was False"
    - stable_result.skip_reason is defined and stable_result.skip_reason == "Conditional result was False"
