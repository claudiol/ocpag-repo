- name: "Pretasks | Checking the destination dir [{{ destination }}]"
  ansible.builtin.stat:
    path: "{{ destination }}"
  register: destination_path

- name: "Creating {{ dest }} directory"
  ansible.builtin.file:
    path: "{{ dest }}"
    state: directory
    mode: "u=rwx,g=rx,o=rx"
  when: destination_path.stat.isdir is not defined

#- ansible.builtin.fail:
#    msg: "pretasks | Path [{{ destination }}] does not exists. Please create the directory."
#  when: destination_path.stat.exists == false

- name: "Checking space in {{ destination }} directory"
  ansible.builtin.debug:
    msg: "Looks like you have enough space. Available space [{{ disk_usage_s }}GiB]"
  when: 'mount_size_available is defined and disk_usage_s|int > 30'

- name: "Pretasks | Checking the pull secret [{{ pull_secret_path}}]"
  ansible.builtin.stat:
    path: "{{ pull_secret_path}}"
  register: result_pull_secret

- ansible.builtin.set_fact:
    stable_version: true
  when: '"stable" in desired_ocp_version'

- ansible.builtin.fail:
    msg: "Pretasks | Pull secret [{{ pull_secret_path }}] does not exists. Please enter a valid pull secret file."
  when: result_pull_secret.stat.exists == false
  
- name: "Pretasks | Checking ocp_version"
  ansible.builtin.debug:
    msg: "pretasks | Desired OpenShift version: {{ desired_ocp_version }}"
  register: version_check
  when: 'stable_version == false and "stable" not in desired_ocp_version and (desired_ocp_version.split(".") | length) > 2'

- debug:
    var: version_check
    
- ansible.builtin.fail: 
    msg: "Pretasks | The desired ocp version [{{ desired_ocp_version }}] is not valid. Valid Example: 4.10.1"
  when: 
    - stable_version == false and version_check.skip_reason is defined and version_check.skip_reason == "Conditional result was False"

- name: Pretasks | Checking OpenShift 4 version
  ansible.builtin.debug:
    msg: "pretasks | Version {{ desired_ocp_version }} is valid"
  register: v4_result
  when: 'stable_version == false and desired_ocp_version|string in v4_versions.stdout'

- debug:
    var: stable_v4_versions

- name: Pretasks | Checking Stable OpenShift 4 version
  ansible.builtin.debug:
    msg: "pretasks | Version {{ desired_ocp_version }} is valid"
  register: stable_result
  when: 'stable_version == true and desired_ocp_version|string in stable_v4_versions.stdout'

- name: Pretasks | Getting version for Stable OpenShift 4
  ansible.builtin.shell: curl -s -L http://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ desired_ocp_version }} | grep 'href=\"openshift-client-linux-4' | cut -d '=' -f 2 | tr -d '"' | sed "s|>||g" | sed "s|openshift-client-linux-||g" | sed "s|.tar.gz||g"
  register: stable_v4_version
  when: 'stable_version == true'

- ansible.builtin.fail: 
    msg: "Pretasks | The desired ocp version [{{ desired_ocp_version }}] does not exits"
  when: 
    - stable_version == false and v4_result.skip_reason is defined and v4_result.skip_reason == "Conditional result was False"
    - stable_version == true and stable_result.skip_reason is defined and stable_result.skip_reason == "Conditional result was False"

- ansible.builtin.set_fact:
    ocpMinVersion: "{{ stable_v4_version.stdout }}"
    ocpMaxVersion: "{{ stable_v4_version.stdout }}"
    ocpMajMinVersion: "{{ stable_v4_version.stdout.split('.')[0] }}.{{ stable_v4_version.stdout.split('.')[1] }}"
    ocp_version: "{{ stable_v4_version.stdout }}"
  when: stable_version == true

- ansible.builtin.set_fact:
    ocpMinVersion: "{{ desired_ocp_version }}"
    ocpMaxVersion: "{{ desired_ocp_version }}"
    ocpMajMinVersion: "{{ desired_ocp_version.split('.')[0] }}.{{ desired_ocp_version.split('.')[1] }}"
    ocp_version: "{{ desired_ocp_version }}"
  when: stable_version == false

- ansible.builtin.debug:
    var: ocp_version
